const express = require('express');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const speakeasy = require('speakeasy');
const qrcode = require('qrcode');
const User = require('../model/User');

const router = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS }
});
async function getCategories() {
  return await Product.distinct("Category"); // –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
}

// üìå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
const Product = require("../model/Product");

router.get("/", async (req, res) => {
  try {
    const products = await Product.find();
    const categories = await getCategories();
    
    let favorites = [];
    if (req.user) {
      const user = await User.findById(req.user._id);
      favorites = user.favorites.map(id => id.toString()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫—É
    }

    res.render("index", { products, Categories: categories, favorites });
  } catch (error) {
    res.status(500).send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤");
  }
});

router.get('/auth', (req, res) => res.render('auth'));
router.post('/auth', async (req, res) => {
  res.redirect('/auth');
});
// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.get('/register', (req, res) => res.render('register'));
router.post('/register', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (await User.findOne({ email })) return res.send('‚ùå Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ email, password: hashedPassword });
    await user.save();
    res.redirect('/login');
  } catch (err) {
    res.send('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + err.message);
  }
});

// üìå –í—Ö–æ–¥
router.get('/login', (req, res) => res.render('login'));
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });

  if (!user) return res.send('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.');
  if (user.isLocked) return res.redirect('/blocked');
  console.log('Entered Password:', password);
  console.log('Hashed Password from DB:', user.password);

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    user.failedLoginAttempts += 1;
    if (user.failedLoginAttempts >= 5) user.isLocked = true;
    await user.save();
    return res.send('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.');
  }

  user.failedLoginAttempts = 0;
  await user.save();

  if (user.is2FAEnabled) {
    req.session.tempUser = { id: user._id, email: user.email };
    return res.redirect('/verify-otp');
  }

  req.session.user = { id: user._id, email: user.email };
  res.redirect('/dashboard');
});

// üìå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
router.get('/reset-password', (req, res) => res.render('reset-password'));
router.post('/reset-password', async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.send('‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω.');

  const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
  user.resetCode = await bcrypt.hash(resetCode, 10);
  user.resetCodeExpires = Date.now() + 5 * 60 * 1000;
  await user.save();

  await transporter.sendMail({
    from: process.env.EMAIL_USER,
    to: email,
    subject: 'üîë –ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
    text: `–í–∞—à –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${resetCode}`
  });

  res.redirect('/verify-reset-code?email=' + email);
});



router.get("/cart", async (req, res) => {
  try {
      if (!req.session.user) {
          return res.redirect("/login");
      }

      const user = await User.findById(req.session.user.id).populate("Cart.product");
      console.log(user.Cart);

      if (!user) {
          return res.status(404).send("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }

      const cartItems = user.Cart || []; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è
      const products = cartItems.map(item => item.product); // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      const categories = await getCategories(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

      res.render("cart", { 
          title: "Your Cart", 
          cartItems, 
          products, // üîπ –ü–µ—Ä–µ–¥–∞–µ–º products –≤ —à–∞–±–ª–æ–Ω
          Categories: categories,
          user 
      });
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});



router.post("/buy", async (req, res) => {
  try {
      const userId = req.session.user.id;  // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
      const user = await User.findById(userId).populate("Cart.product");  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ

      if (!user || !user.Cart || user.Cart.length === 0) {
          return res.status(400).send("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
      }

      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –≤ –∫–æ—Ä–∑–∏–Ω–µ
      for (const item of user.Cart) {
          const product = item.product;
          const size = item.size;

          // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞—Å—Å–∏–≤–µ sizes
          const productSize = product.sizes.find(s => s.size.toUpperCase() === size.toUpperCase());

          if (!productSize || productSize.quantity <= 0) {
              // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
              return res.status(400).send(`‚ùå –†–∞–∑–º–µ—Ä ${size} —Ç–æ–≤–∞—Ä–∞ "${product.Name}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏`);
          }

          // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
          productSize.quantity -= 1;
          await product.save();  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      }

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
      user.Cart = [];
      await user.save();

      res.send("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!");  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏:", error);
      res.status(500).send("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  }
});
router.post("/remove", async (req, res) => {
  const { productId, size } = req.body;
  
  if (!req.session.user) {
      return res.status(401).send("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
  }

  try {
      const user = await User.findById(req.session.user.id);
      if (!user) {
          return res.status(404).send("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }

      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ —É–¥–∞–ª—è–µ–º
      const productIndex = user.Cart.findIndex(item => 
          item.product.toString() === productId && item.size === size
      );

      if (productIndex === -1) {
          return res.status(404).send("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ");
      }

      user.Cart.splice(productIndex, 1);  // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
      await user.save();

      res.status(200).send("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã");
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
      res.status(500).send("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});
router.post('/add-to-cart', (req, res) => {
  const { productId, size } = req.body;

  if (!req.session.cart) {
    req.session.cart = [];
  }

  // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
  Product.findById(productId, (err, product) => {
    if (err) {
      return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É' });
    }

    const cartItem = {
      productId: product._id,
      name: product.Name,
      price: product.price,
      size: size,
      image: product.Image
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    req.session.cart.push(cartItem);

    res.json({ success: true });
  });
});
// –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
router.post('/cart/update-quantity', (req, res) => {
  const { productId, action } = req.body;

  if (req.session.cart) {
    const product = req.session.cart.find(item => item.productId == productId);
    if (product) {
      if (action === 'increase') {
        product.quantity++;
      } else if (action === 'decrease' && product.quantity > 1) {
        product.quantity--;
      }
    }
    res.json({ success: true });
  } else {
    res.json({ success: false });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
router.post('/cart/remove', (req, res) => {
  const { productId } = req.body;

  if (req.session.cart) {
    req.session.cart = req.session.cart.filter(item => item.productId != productId);
    res.json({ success: true });
  } else {
    res.json({ success: false });
  }
});







// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
router.get('/verify-reset-code', (req, res) => {
  res.render('verify-reset-code', { email: req.query.email });
});
router.post('/verify-reset-code', async (req, res) => {
  const { email, code, newPassword } = req.body;
  const user = await User.findOne({ email });

  if (!user || !user.resetCodeExpires || Date.now() > user.resetCodeExpires)
    return res.send('‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.');

  const isMatch = await bcrypt.compare(code, user.resetCode);
  if (!isMatch) return res.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.');

  user.password = newPassword;
  user.resetCode = undefined;
  user.resetCodeExpires = undefined;
  await user.save();

  res.redirect('/login');
});


router.post('/verify-setup-2fa', async (req, res) => {
  if (!req.session.user) return res.redirect('/login');

  const { otp } = req.body;
  const user = await User.findById(req.session.user.id);
  if (!user || !user.twoFASecret) return res.redirect('/setup-2fa');

  const verified = speakeasy.totp.verify({
      secret: user.twoFASecret,
      encoding: 'base32',
      token: otp,
      window: 1
  });

  if (!verified) {
      return res.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }

  // ‚úÖ –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, –≤–∫–ª—é—á–∞–µ–º 2FA
  user.is2FAEnabled = true;
  await user.save();

  res.redirect('/dashboard'); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è 2FA
});


// üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è 2FA
router.get('/setup-2fa', async (req, res) => {
  if (!req.session.user) return res.redirect('/login');

  const user = await User.findById(req.session.user.id);
  if (!user) return res.redirect('/login');

  const secret = speakeasy.generateSecret({ name: `MyApp (${user.email})` });
  user.twoFASecret = secret.base32;
  await user.save();
  console.log('Generated Secret:', secret.base32);
  console.log('User Secret from DB:', user.twoFASecret);
  qrcode.toDataURL(secret.otpauth_url, (err, qrCode) => {
    if (err) return res.send('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
    res.render('setup-2fa', { qrCode, secret: secret.base32 }); // ‚úÖ –ø–µ—Ä–µ–¥–∞–µ–º qrCode
  });
});

// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ OTP-–∫–æ–¥–∞
router.get('/verify-otp', (req, res) => {
  if (!req.session.tempUser) return res.redirect('/login');
  res.render('verify-otp');
});
router.post('/verify-otp', async (req, res) => {
  const { otp } = req.body;
  const tempUser = req.session.tempUser;
  if (!tempUser) return res.redirect('/login');

  const user = await User.findById(tempUser.id);
  if (!user) return res.redirect('/login');
  console.log('User Secret at Verification:', user.twoFASecret);
  console.log('OTP Entered:', otp);
  const verified = speakeasy.totp.verify({
    secret: user.twoFASecret,
    encoding: 'base32',
    token: otp,
    window: 2
  });

  if (!verified) return res.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π OTP.');

  req.session.user = tempUser;
  delete req.session.tempUser;
  res.redirect('/dashboard');
});

// üìå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ 2FA
router.post('/disable-2fa', async (req, res) => {
  if (!req.session.user) return res.redirect('/login');

  const user = await User.findById(req.session.user.id);
  if (!user) return res.redirect('/login');

  user.twoFASecret = undefined;
  user.is2FAEnabled = false;
  await user.save();

  res.redirect('/dashboard');
});

// üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
router.get('/dashboard', async (req, res) => {
  const categories = await getCategories();
  if (!req.session.user) return res.redirect('/login');

  const user = await User.findById(req.session.user.id);
  res.render('dashboard', { user,Categories:categories });
});

// üìå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
router.get('/blocked', (req, res) => res.render('blocked'));

// üìå –í—ã—Ö–æ–¥
router.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/login');
  });
});

module.exports = router;
